#define ENABLE_NE10_FIR_DECIMATE_FLOAT_NEON
#include <libraries/ne10/NE10.h>
#include <vector>


class Decimator
{
public:
	Decimator(){};
	Decimator(unsigned int factor, unsigned int blocksize){ setup(factor, blocksize); };
	int setup(unsigned int factor, unsigned int blocksize);
	
	std::vector<float> output;
	std::vector<float>& decimate(std::vector<float>& input);
	
	~Decimator(){ cleanup(); };
	void cleanup();
	
private:
	ne10_fir_decimate_instance_f32_t	firFilter;	
	ne10_float32_t *  					source = nullptr;		
	ne10_float32_t *  					destiny = nullptr;		
	ne10_uint32_t  						blockSize;				
	ne10_uint8_t						factor;						
	ne10_uint16_t						numTaps = 117;			
	//ne10_float32_t*						firFilterCoeff;			
	ne10_float32_t*						firFilterState;	// Points to state variable array of length numTaps+maxBlockSize-1

	ne10_float32_t firFilterCoeff[117] = { // tfilter, 10000 3db, 11000 -96db, 117 taps
		0.00016216547717600328,
		0.0002495484255972183,
	  -0.0014202219909404711,
	  -0.00750782363813223,
	  -0.01783824594532769,
	  -0.025784554356521147,
	  -0.02208662106518247,
	  -0.005900601893044972,
	  0.010048579351251325,
	  0.011214812050186653,
	  -0.0010245723645476291,
	  -0.009724166369713256,
	  -0.00395489430590952,
	  0.0066531521925275805,
	  0.006264958046484275,
	  -0.0036604029082553096,
	  -0.007114903532802655,
	  0.0010951554581792504,
	  0.007195153108662842,
	  0.0010831862903500666,
	  -0.006832238713073327,
	  -0.002980223614466638,
	  0.0061572581676372085,
	  0.004673100530494495,
	  -0.005222181786842589,
	  -0.006235695400591106,
	  0.0039805348285139085,
	  0.007655829632659337,
	  -0.002379440837721912,
	  -0.008855248271959318,
	  0.00041343525036864327,
	  0.009758529187021033,
	  0.0019183410257943058,
	  -0.0102769420551735,
	  -0.0046148559546617465,
	  0.010286934031595122,
	  0.007641992996607062,
	  -0.009648848816181412,
	  -0.010927384248280379,
	  0.008226849106580857,
	  0.0143807983691686,
	  -0.005882757656104116,
	  -0.01792214829619118,
	  0.0024172937532255002,
	  0.021445477131192985,
	  0.0024543331426958113,
	  -0.02478654365958818,
	  -0.009091849542287408,
	  0.02785614360361604,
	  0.018248506726299095,
	  -0.03057044101215127,
	  -0.03160358942633006,
	  0.03278043820420968,
	  0.0534465258441793,
	  -0.034410729664468676,
	  -0.09981147299757971,
	  0.03547880246526167,
	  0.31622880302149126,
	  0.46423502197512256,
	  0.31622880302149126,
	  0.03547880246526167,
	  -0.09981147299757971,
	  -0.034410729664468676,
	  0.0534465258441793,
	  0.03278043820420968,
	  -0.03160358942633006,
	  -0.03057044101215127,
	  0.018248506726299095,
	  0.02785614360361604,
	  -0.009091849542287408,
	  -0.02478654365958818,
	  0.0024543331426958113,
	  0.021445477131192985,
	  0.0024172937532255002,
	  -0.01792214829619118,
	  -0.005882757656104116,
	  0.0143807983691686,
	  0.008226849106580857,
	  -0.010927384248280379,
	  -0.009648848816181412,
	  0.007641992996607062,
	  0.010286934031595122,
	  -0.0046148559546617465,
	  -0.0102769420551735,
	  0.0019183410257943058,
	  0.009758529187021033,
	  0.00041343525036864327,
	  -0.008855248271959318,
	  -0.002379440837721912,
	  0.007655829632659337,
	  0.0039805348285139085,
	  -0.006235695400591106,
	  -0.005222181786842589,
	  0.004673100530494495,
	  0.0061572581676372085,
	  -0.002980223614466638,
	  -0.006832238713073327,
	  0.0010831862903500666,
	  0.007195153108662842,
	  0.0010951554581792504,
	  -0.007114903532802655,
	  -0.0036604029082553096,
	  0.006264958046484275,
	  0.0066531521925275805,
	  -0.00395489430590952,
	  -0.009724166369713256,
	  -0.0010245723645476291,
	  0.011214812050186653,
	  0.010048579351251325,
	  -0.005900601893044972,
	  -0.02208662106518247,
	  -0.025784554356521147,
	  -0.01783824594532769,
	  -0.00750782363813223,
	  -0.0014202219909404711,
	  0.0002495484255972183,
	  0.00016216547717600328
	};
	
	
};